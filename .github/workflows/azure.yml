name: Node.js App Deployment to Azure

on:
  push:
    branches:
      - main
      - test
      - workflow

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.x'
  DB_TYPE: ${{ secrets.DB_TYPE_DEV }}
  DB_DATABASE: ${{ secrets.DB_DATABASE_DEV }}
  DB_HOST: ${{ secrets.DB_HOST_DEV }}
  DB_USERNAME: ${{ secrets.DB_USERNAME_DEV }}
  DB_PORT: ${{ secrets.DB_PORT_DEV }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD_DEV }}
  DB_SSL_CA_CERT: ${{ secrets.DB_SSL_CA_CERT_DEV }}
  JWT_SECRET: ${{ secrets.JWT_SECRET_DEV }}
  JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN_DEV }}
  PORT: ${{ secrets.PORT_DEV }}
  FILESERVICE_PORT: ${{ secrets.FILESERVICE_PORT_DEV }}
  BE_FILE_SERVER_URL: ${{ secrets.BE_FILE_SERVER_URL_DEV }}
  REGISTRY_FOLDER: backend
  AZURE_CONTAINER_REGISTRY_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER_DEV }}
  AZURE_CONTAINER_REGISTRY_USERNAME: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME_DEV }}
  AZURE_CONTAINER_REGISTRY_PASSWORD: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD_DEV }}
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_DEV }}
  AZURE_PUBLIC_IP: ${{ secrets.AZURE_PUBLIC_IP_DEV }}
  NAMESPACE: scoop-dev-ingress-controlled-namespace
  RESOURCE_GROUP: scoop-dev-rg
  CLUSTER_NAME: scoop-dev-cluster

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}
          username: ${{ env.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ env.AZURE_CONTAINER_REGISTRY_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          build-args: |
            DB_TYPE=${{ env.DB_TYPE }}
            DB_DATABASE=${{ env.DB_DATABASE }}
            DB_HOST=${{ env.DB_HOST }}
            DB_USERNAME=${{ env.DB_USERNAME }}
            DB_PORT=${{ env.DB_PORT }}
            DB_PASSWORD=${{ env.DB_PASSWORD }}
            DB_SSL_CA_CERT=${{ env.DB_SSL_CA_CERT }}
            JWT_SECRET=${{ env.JWT_SECRET }}
            JWT_EXPIRES_IN=${{ env.JWT_EXPIRES_IN }}
            PORT=${{ env.PORT }}
            FILESERVICE_PORT=${{ env.FILESERVICE_PORT }}
            BE_FILE_SERVER_URL=${{ env.BE_FILE_SERVER_URL }}
          push: true
          tags: |
            ${{ env.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}/${{ env.REGISTRY_FOLDER }}:${{ github.sha }}
            ${{ env.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}/${{ env.REGISTRY_FOLDER }}:latest

      - name: Set up Python and Azure CLI
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure AKS Context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}

      - name: Prepare Kubernetes Deployment
        run: |
          export PORT=${{ env.PORT }}
          export IMAGE_TAG=${{ github.sha }}
          export CONTAINER_REGISTRY=${{ env.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}
          export PUBLIC_IP=${{ env.AZURE_PUBLIC_IP }}
          envsubst < k8/k8.yml.template > k8/k8.yml

      - name: Deploy to Kubernetes
        uses: Azure/k8s-deploy@v4
        with:
          namespace: ${{ env.NAMESPACE }}
          images: ${{ env.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}/${{ env.REGISTRY_FOLDER }}:${{ github.sha }}
          manifests: k8/k8.yml
