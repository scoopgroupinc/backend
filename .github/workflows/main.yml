name: Build and deploy Node.js app to scoopProdContainerRegistry

on:
    push:
        branches:
            - workflow2

env:
    NODE_VERSION: '16' # Define node version here to maintain consistency across jobs
    PYTHON_VERSION: '3.x' # Define python version here to maintain consistency across jobs
    DB_TYPE: ${{ vars.DB_TYPE_PROD }}
    DB_DATABASE: ${{ vars.DB_DATABASE_PROD }}
    DB_HOST: ${{ vars.DB_HOST_PROD }}
    DB_USERNAME: ${{ secrets.DB_USERNAME_PROD }}
    DB_PORT: ${{ vars.DB_PORT_PROD }}
    DB_PASSWORD: ${{ secrets.DB_PASSWORD_PROD }}
    DB_SSL_CA_CERT: ${{ secrets.DB_SSL_CA_CERT_PROD }}
    JWT_SECRET: ${{ secrets.JWT_SECRET_PROD }}
    JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN_PROD }}
    PORT: ${{ vars.PORT_PROD }}
    FILESERVICE_PORT: ${{ vars.FILESERVICE_PORT_PROD }}
    BE_FILE_SERVER_URL: ${{ vars.BE_FILE_SERVER_URL_PROD }}
    REGISTRY_FOLDER: backend
    AZURE_CONTAINER_REGISTRY_LOGIN_SERVER: ${{ vars.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER_PROD }}
    AZURE_CONTAINER_REGISTRY_USERNAME: ${{ vars.AZURE_CONTAINER_REGISTRY_USERNAME_PROD }}
    AZURE_CONTAINER_REGISTRY_PASSWORD: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD_PROD }}
    AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_PROD }}
    AZURE_PUBLIC_IP: ${{ vars.AZURE_PUBLIC_IP_PROD }}
    NAMESPACE: scoop-prod-ingress-controlled-namespace
    RESOURCE_GROUP: scoop-prod-rg
    CLUSTER_NAME: scoop-prod-cluster

jobs:
    build:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Login to Docker Registry
              uses: docker/login-action@v1
              with:
                  registry: ${{ env.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}
                  username: ${{ env.AZURE_CONTAINER_REGISTRY_USERNAME }}
                  password: ${{ env.AZURE_CONTAINER_REGISTRY_PASSWORD }}

            - name: Build and push Docker images
              uses: docker/build-push-action@v2
              with:
                  context: .
                  file: Dockerfile
                  build-args: |
                      DB_TYPE=${{ env.DB_TYPE }}
                      DB_DATABASE=${{ env.DB_DATABASE }}
                      DB_HOST=${{ env.DB_HOST }}
                      DB_USERNAME=${{ env.DB_USERNAME }}
                      DB_PORT=${{ env.DB_PORT }}
                      DB_PASSWORD=${{ env.DB_PASSWORD }}
                      DB_SSL_CA_CERT=${{ env.DB_SSL_CA_CERT }}
                      JWT_SECRET=${{ env.JWT_SECRET }}
                      JWT_EXPIRES_IN=${{ env.JWT_EXPIRES_IN }}
                      PORT=${{ env.PORT }}
                      FILESERVICE_PORT=${{ env.FILESERVICE_PORT }}
                      BE_FILE_SERVER_URL=${{ env.BE_FILE_SERVER_URL }}
                  push: true
                  tags: |
                      ${{ env.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}/${{ env.REGISTRY_FOLDER }}:${{ github.sha }}
                      ${{ env.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}/${{ env.REGISTRY_FOLDER }}:latest

    deploy:
        runs-on: ubuntu-latest
        needs: build
        permissions:
            contents: read
            id-token: write
            deployments: write

        steps:
            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Set up Python and Azure CLI
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Login to Azure
              uses: azure/login@v1
              with:
                  creds: ${{ env.AZURE_CREDENTIALS }}

            - uses: azure/docker-login@v1
              with:
                  login-server: ${{ env.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}
                  username: ${{ env.AZURE_CONTAINER_REGISTRY_USERNAME }}
                  password: ${{ env.AZURE_CONTAINER_REGISTRY_PASSWORD }}

            - name: Setup kubectl
              uses: azure/setup-kubectl@v3
              with:
                  version: 'latest'

            - name: Set up AKS context
              uses: azure/aks-set-context@v3
              with:
                  resource-group: ${{ env.RESOURCE_GROUP }}
                  cluster-name: ${{ env.CLUSTER_NAME }}

            - name: Checkout repository
              uses: actions/checkout@v3
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Substitute environment variables in k8s config
              run: |
                  export PORT=${{ env.PORT }}
                  export IMAGE_TAG=${{ github.sha }}
                  export CONTAINER_REGISTRY=${{ env.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}
                  export PUBLIC_IP=${{ env.AZURE_PUBLIC_IP }}
                  export REGISTRY_FOLDER=${{ env.REGISTRY_FOLDER }}
                  export RESOURCE_GROUP=${{ env.RESOURCE_GROUP }}
                  touch k8/k8.yml
                  envsubst < k8/k8.yml.template > k8/k8.yml

            #to remove after certain it works
            - name: Echo contents of k8.yml
              run: cat k8/k8.yml

            - name: Deploy to AKS
              id: deploy-aks
              uses: Azure/k8s-deploy@v4
              with:
                  namespace: ${{ env.NAMESPACE }}
                  images: ${{ env.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}/${{ env.REGISTRY_FOLDER }}:${{ github.sha }}
                  manifests: |
                      k8/k8.yml
