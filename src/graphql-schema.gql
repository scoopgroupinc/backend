# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  userId: String
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  password: String
  createdAt: String!
  salt: String
  code: Float
  isVerified: Boolean
  resetCode: Float
  updatedAt: String!
  isOnboarded: Boolean!
  isVoteOnboarded: Boolean!
}

type UserDevice {
  id: ID!
  userId: ID!
  createdAt: String!
  osType: String
  macAddress: String
  version: String
  lastLogin: String
  notificationToken: String
}

"""User tags type visible"""
type UserTagsTypeVisibleEnity {
  id: ID!
  userId: ID!
  emoji: String
  tagType: String!
  visible: Boolean!
  userTags: [UserTagsEntity!]!
}

"""Entity for user tags"""
type UserTagsEntity {
  id: ID!
  userId: ID!
  tagName: String!
  tagType: String!
}

type UserOutput {
  userId: ID!
  firstName: String
  lastName: String
  email: String
  isOnboarded: Boolean!
  isVoteOnboarded: Boolean!
}

type UserToken {
  token: String!
  user: UserOutput
  message: String
}

type VerifyRestPasswordCode {
  message: String
  token: String!
}

type LocationEntity {
  userId: ID!
  latitude: String
  longitude: String
  addressLine1: String
  addressLine2: String
  stateProvince: String
  country: String
  zipPostal: Float
}

type UserProfile {
  userId: ID!
  createdAt: String
  profilePhoto: String
  birthday: String
  height: String
  gender: String
  locationId: String
  jobTitle: String
  company: String
  homeTown: String
  school: String
  promptIds: [String!]
}

type UserPreference {
  userId: ID!
  createdAt: String
  heightRange: [String!]
  ageRange: [String!]
  gender: [String!]
  distance: Float!
  ethnicityPreferences: [String!]
  sportsPreferences: [String!]
}

type TagsEntity {
  id: String!
  name: String
  type: String
  order: Float
  visible: Boolean
  emoji: String
}

type RatingComment {
  id: String!
  ratingGroupId: String!
  startTime: String!
  endTime: String!
  comment: String!
  final: Boolean!
}

type RateCriterias {
  id: ID!
  title: String!
  description: String!
  type: String!
}

type Prompts {
  id: ID!
  prompt: String!
  type: String!
  sample_answer: String
}

type MetaDetails {
  id: ID!
  forceUpdateAndroid: String!
  forceUpdateIOS: String!
  updateAndroid: String!
  updateIOS: String!
  updateTitleAndroid: String!
  updateTitleIOS: String!
  updateButtonAndroid: String!
  updateButtonIOS: String!
  updateTextAndroid: String!
  updateTextIOS: String!
  closeUpdateButtonAndroid: String!
  closeUpdateButtonIOS: String
  createdAt: String!
  updateAt: String!
}

type FeedBack {
  id: ID!
  userId: String!
  deviceOS: String!
  appVersion: String!
  rating: Float!
  issue: String!
  text: String!
  image: String
  createdAt: String!
}

type RatingOutput {
  contentId: String!
  type: String!
  Trustworty: Float
  Smart: Float
  Attractive: Float
  well_written: Float
  Informative: Float
  Engaging: Float
  total: Int
  counts: String
  comments: [CommentOutput!]
}

type CommentOutput {
  endTime: String!
  comment: String!
}

type AverageOutput {
  average: Float
  count: Float
}

type UserPromptsOutput {
  id: ID!
  createdAt: String!
  userId: String!
  promptId: String!
  prompt: String
  answer: String!
}

type BlockUserOutput {
  userId: String!
  blocked: Boolean!
}

type ComplaintsOutput {
  id: ID!
  createdAt: String!
  reporterId: String!
  accusedId: String!
  reason: String!
  comment: String!
  type: String!
  contentId: String
  media_file: String
  isClosed: Boolean!
}

type IVisual {
  id: String!
  userId: String!
  videoOrPhoto: String!
  visualPromptId: String
  description: String
  isVisible: Boolean!
}

type UserChoiceOutput {
  id: String!
  swiperId: String!
  shownUserId: String!
  swiperChoice: String!
  age: String!
  createdAt: DateTime!
  gender: String!
  choiceName: String!
  prompt: UserPromptsOutput!
  profile: [UserTagsTypeVisibleEnity!]!
  visual: IVisual
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MatchesOutput {
  id: ID!
  userId: String!
  matchUserId: String!
  matchName: String!
  gender: String!
  age: String!
  createdAt: DateTime!
  visual: IVisual
}

type MatchUser {
  userId: String!
  firstName: String!
  pic: String!
}

type SwiperActionOutput {
  message: String!
  user1: MatchUser
  user2: MatchUser
}

type IGroupMembers {
  groupId: String!
  groupName: String!
  groupCode: String!
  members: [IGroupUser!]!
}

type IGroupUser {
  userId: String!
  name: String!
  gender: String!
  visual: String
}

type Query {
  getUser(userId: String!): User!
  getUserDevice(macAddress: String!): UserDevice!
  getAllUserTagsTypeVisible(userId: String!): [UserTagsTypeVisibleEnity!]!
  getUserProfile(userId: String!): UserProfile!

  """fetch user preference"""
  getUserPreference(userId: String!): UserPreference!

  """fetch user location details"""
  getUserLocation(userId: String!): LocationEntity!

  """fetch a tag"""
  getSpecificTag(id: String!): TagsEntity!

  """
  Filter by: all,"", frequency, physical_activity,education,religion etc 
  """
  getTags(tagType: String!): [TagsEntity!]!

  """search by: frequency, physical_activity,education,religion etc"""
  getTagsbyType(tagType: String!): [TagsEntity!]!
  uploadTags: String!

  """Fetch rating for specific content"""
  getRatingByContent(ratingInput: [IGetRatingInput!]!): [RatingOutput!]!

  """Fetch content comments by owner"""
  getRatingContentComments(contentId: String!): [RatingComment!]!

  """
  Fetch average rating based on criteria id and/ or rater id. The first parameter 
         is the rater id and then the criteria id. Passing the rater id as an empty string  will return a result of the 
          average rating for the criteria id provided
  """
  getAverageRatings(raterId: String!, criteriaId: String!): AverageOutput!

  """fetch a tag"""
  getspecificTag(criteriaId: String!): RateCriterias!

  """
  Filter by: all,"", user_prompts and visual_prompts. 
      Passing all or an empty string as parameter will fetch all criterias
         tags. To filter particular criterias of type, pass the type as a parameter 
  """
  getCriterias(criteriaType: String!): [RateCriterias!]!
  uploadCriterias: String!

  """
  To fetch all prompts, pass all or empty string('') as first parameter and empty
      string ('') as second parameter, id. To fetch prompts of a type (prompts and visual_prompts only), specify the prompt type as first parameter and empty
      string ('') as second parameter, id. Specify or pass id as second paramter whiles the second parameter remains an empty
      string ('') to fetch a specific prompt.
  """
  getPrompts(promptType: String!, id: String!): [Prompts!]!

  """
  Always specify the prompt type (prompts and visual_prompts) to upload. Pass the prompt type as parameter.
  """
  uploadPrompts(promptType: String!): String!
  getAllUserPromptsData(userId: String!): [UserPromptsOutput!]!
  getUserAnsweredPrompts(userId: String!): [UserPromptsOutput!]!

  """method retrieves displayed prompts for a given user."""
  getUserPromptsDisplayed(userId: String!): String!
  getAllOpenComplaints(complaintsFilter: ComplaintsFilter!): [ComplaintsOutput!]!
  getAComplaint(complaintId: String!): ComplaintsOutput!
  isUserBlocked(userId: String!, userIds: [String!]!): [BlockUserOutput!]!
  getUserMatches(userId: String!): [MatchesOutput!]!
  getUserChoices(userId: String!): [UserChoiceOutput!]!
  getMetaDetails: MetaDetails!
  getFeedBacks(feedbackfilter: FeedBackFilter!): [FeedBack!]!
  verifyCode(code: String!, userId: String!): String!
  getGroupMembers(userId: String!): [IGroupMembers!]!
}

input IGetRatingInput {
  contentId: String!
  type: String!
}

input ComplaintsFilter {
  page: Int!
  reporterId: String
  accusedId: String
  type: String
  isClosed: Boolean
  fromDate: String
  toDate: String
}

input FeedBackFilter {
  deviceOS: String
  appVersion: String
  issue: String
  fromDate: String
  toDate: String
  page: Int!
  userId: String
  rating: Float
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): String!
  updateUser(updateUserInput: UpdateUserInput!): User!
  deleteUser(userId: String!, email: String!): String!
  login(loginUserInput: LoginUserInput!): UserToken!
  loginWithProvider(authProviderInput: AuthProviderInput!): UserToken!
  activateAccount(code: Float!, email: String!): UserToken!
  resendActivationCode(email: String!): String!
  forgotPassword(email: String!): String!
  verifyPasswordResetCode(email: String!, code: Float!): VerifyRestPasswordCode!
  resetPassword(email: String!, password: String!): User!
  testNewMailer(email: String!, code: Float!): String!
  updateOnBoarding(onboardInput: OnBoardInput!): String!
  saveDeviceDetails(userdeviceInput: UserDeviceInput!): UserDevice!
  saveUserTagsTypeVisible(userTagsTypeVisibleInput: [UserTagsTypeVisibleInput!]!): [UserTagsTypeVisibleEnity!]!
  saveUserProfile(userProfileInput: UserProfileInput!): UserProfile!

  """Use this endpoint to savs and update entity"""
  saveUserPreference(userPreferenceInput: UserPreferenceInput!): UserPreference!
  saveUserLocation(createLocationInput: CreateLocationInput!): LocationEntity!
  saveTag(tagInput: TagsInput!): TagsEntity!
  saveRatingGroup(ratingGroupInput: SaveRatingInput!): String!
  addNewPrompt(promptInput: PromptsInput!): Prompts!

  """
  method handles saving a user prompt. It checks if there is an existing prompt with the same answer and saves the new prompt if it's different.
  """
  handleSaveUserPrompt(UserPromptInput: IUserPrompt!): UserPromptsOutput!

  """
  method saves new or changed user prompts. It also saves the order of the prompts and returns the saved prompts and their IDs.
  """
  saveUserPrompts(UserPromptInput: [IUserPrompt!]!): [UserPromptsOutput!]!

  """
  method saves the order of user prompts. It checks if the user has answered each prompt before saving the order. Usecase for saving prompt order changes, where prompt answers have not changed.
  """
  saveUserPromptsOrder(userPromptsOrder: IUserPromptsOrder!): String!
  saveNewCompliants(complaintsInput: ComplaintsInput!): String!
  updateComplaint(complaintsInput: ComplaintsInput!): String!
  closeComplaints(complaintId: String!): String!
  deactivateMatch(id: String!): String!
  userSwipeAction(matchId: String!, choice: String!): SwiperActionOutput!
  createMetaDetails(metaDetailsInput: MetaDetailsInput!): MetaDetails!
  updateDetials(metaDetailsInput: MetaDetailsInput!): MetaDetails!
  saveUserFeedBack(feedbackInput: FeedBackInput!): String!
  createCodes(code: String!, name: String!): String!
}

input CreateUserInput {
  email: String
  password: String
}

input UpdateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
}

input LoginUserInput {
  email: String!
  password: String!
}

input AuthProviderInput {
  email: String
  provider: String!
  id: String!
}

input OnBoardInput {
  userId: String!
  isOnboarded: Boolean
  isVoteOnboarded: Boolean
}

input UserDeviceInput {
  userId: ID!
  createdAt: String
  osType: String
  macAddress: String
  version: String
  lastLogin: String
}

"""Input type for user tags type visible"""
input UserTagsTypeVisibleInput {
  userId: ID!
  visible: Boolean!
  emoji: String!
  tagType: tag_type!
  userTags: [UserTagsInput!]
}

enum tag_type {
  alcohol_usage
  book_genre
  cannibis_usage
  company
  creative
  date_options
  diet
  drink
  drug_usage
  education
  ethnicity
  film_genre
  gender
  going_out
  homeTown
  job
  language
  meyer_briggs
  music_genre
  parenting_goal
  parenting_type
  peronsality
  pets
  physical_activity
  politics
  relationship_goal
  relationship_type
  religion
  religious_practice
  school
  staying_in
  smoking
  travel_goals
  zodiac
}

"""Input type for user tags"""
input UserTagsInput {
  userId: ID!
  tagName: String!
  tagType: tag_type!
}

input UserProfileInput {
  userId: ID!
  createdAt: String
  profilePhoto: String
  birthday: String
  height: String
  gender: String
  locationId: String
  jobTitle: String
  company: String
  homeTown: String
  school: String
}

input UserPreferenceInput {
  userId: ID!
  createdAt: String
  heightRange: [String!]
  ageRange: [String!]
  gender: [String!]
  distance: Float
  ethnicityPreferences: [String!]
  sportsPreferences: [String!]
}

input CreateLocationInput {
  userId: ID!
  latitude: String
  longitude: String
  addressLine1: String
  addressLine2: String
  stateProvince: String
  country: String
  zipPostal: String
}

input TagsInput {
  id: ID!
  name: String!
  type: String!
  order: Float!
  visible: Boolean!
  emoji: String!
}

input SaveRatingInput {
  id: ID
  raterId: String!
  contentId: String!
  type: String!
  comment: [RatingCommentInput!]!
  ratingDetails: [saveRatingDto!]!
  startTime: String!
  endTime: String!
}

input RatingCommentInput {
  id: ID
  ratingGroupId: String!
  startTime: String!
  endTime: String!
  comment: String!
  final: Boolean!
}

input saveRatingDto {
  id: ID
  criteriaId: String!
  rating: Float!
}

input PromptsInput {
  id: ID!
  prompt: String!
  type: String!
  sample_answer: String
}

input IUserPrompt {
  userId: String!
  promptId: String!
  answer: String!
}

input IUserPromptsOrder {
  userId: String!
  promptIds: [String!]!
}

input ComplaintsInput {
  id: ID
  createdAt: String
  reporterId: String!
  accusedId: String!
  reason: String!
  comment: String!
  type: String!
  contentId: String
  media_file: String
  isClosed: Boolean
}

input MetaDetailsInput {
  forceUpdateAndroid: String!
  forceUpdateIOS: String!
  updateAndroid: String!
  updateIOS: String!
  updateTitleAndroid: String
  updateTitleIOS: String
  updateButtonAndroid: String
  updateButtonIOS: String
  updateTextAndroid: String
  updateTextIOS: String
  closeUpdateButtonAndroid: String
  closeUpdateButtonIOS: String
}

input FeedBackInput {
  userId: String!
  deviceOS: String!
  appVersion: String!
  rating: Float!
  issue: String!
  text: String!
  image: String
}