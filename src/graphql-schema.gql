# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  userId: String
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  password: String
  createdAt: String!
  salt: String
  code: Float
  isVerified: Boolean
  resetCode: Float
  updatedAt: String!
}

type UserDevice {
  id: ID!
  userId: ID!
  createdAt: String!
  osType: String
  macAddress: String
  version: String
  lastLogin: String
  notificationToken: String
}

type UserOutput {
  userId: ID!
  firstName: String
  lastName: String
  email: String
}

type UserToken {
  token: String!
  user: UserOutput
  message: String
}

type VerifyRestPasswordCode {
  message: String
  token: String!
}

type LocationEntity {
  userId: ID!
  latitude: String
  longitude: String
  addressLine1: String
  addressLine2: String
  stateProvince: String
  country: String
  zipPostal: Float
}

type UserProfile {
  userId: ID!
  createdAt: String
  profilePhoto: String
  birthday: String
  height: String
  gender: String
  locationId: String
  jobTitle: String
  jobTitleVisible: Boolean
  company: String
  companyVisible: Boolean
  homeTown: String
  homeTownVisible: Boolean
  school: String
  schoolVisible: Boolean
  educationLevel: String
  educationLevelVisible: Boolean
  ethinicity: [String!]
  ethinicityVisible: Boolean
  sports: [String!]
  sportsVisible: Boolean
  smoking: String
  smokingVisible: Boolean
  cannabis: String
  cannabisVisible: Boolean
  alcohol: String
  alcoholVisible: Boolean
  drugs: String
  drugsVisible: Boolean
  diet: [String!]
  dietVisible: Boolean
  languages: String
  languagesVisible: Boolean
  musicGenre: [String!]
  musicGenreVisible: Boolean
  creativeOulet: [String!]
  creativeOuletVisible: Boolean
  religions: [String!]
  religionsVisible: Boolean
  religiousPractice: [String!]
  religiousPracticeVisible: String
  zodiac: String
  zodiacVisible: Boolean
  meyerBriggs: String
  meyerBriggsVisible: Boolean
  characteristics: [String!]
  characteristicsVisible: Boolean
  politics: String
  politicsVisible: Boolean
  parentingGoal: String
  parentingGoalVisible: Boolean
  relationshipGoals: [String!]
  relationshipGoalsVisible: Boolean
  relationshipTypes: [String!]
  relationshipTypesVisible: Boolean
  pets: [String!]
  petsVisible: Boolean
}

type UserPreference {
  userId: ID!
  createdAt: String
  heightRange: [String!]
  ageRange: [String!]
  gender: [String!]
  distance: Float!
  ethnicityPreferences: [String!]
  sportsPreferences: [String!]
}

type TagsEntity {
  id: String!
  name: String
  type: String
  order: Float
  visible: Boolean
  emoji: String
}

type RatingComment {
  id: String!
  ratingGroupId: String!
  startTime: String!
  endTime: String!
  comment: String!
  final: Boolean!
}

type RateCriterias {
  id: ID!
  title: String!
  description: String!
  type: String!
}

type Prompts {
  id: ID!
  prompt: String!
  type: String!
  sample_answer: String
}

type MetaDetails {
  id: ID!
  forceUpdateAndroid: String!
  forceUpdateIOS: String!
  updateAndroid: String!
  updateIOS: String!
  updateTitleAndroid: String!
  updateTitleIOS: String!
  updateButtonAndroid: String!
  updateButtonIOS: String!
  updateTextAndroid: String!
  updateTextIOS: String!
  closeUpdateButtonAndroid: String!
  closeUpdateButtonIOS: String
  createdAt: String!
  updateAt: String!
}

type FeedBack {
  id: ID!
  userId: String!
  deviceOS: String!
  appVersion: String!
  rating: Float!
  issue: String!
  text: String!
  image: String
  createdAt: String!
}

type RatingOutput {
  Trustworty: Float
  Smart: Float
  Attractive: Float
  well_written: Float
  Informative: Float
  Engaging: Float
}

type AverageOutput {
  average: Float
  count: Float
}

type UserPromptsOutput {
  id: ID!
  createdAt: String!
  userId: String
  promptId: String
  prompt: String
  answer: String
}

type ComplaintsOutput {
  id: ID!
  createdAt: String!
  reporterId: String!
  accusedId: String!
  reason: String!
  comment: String!
  type: String!
  contentId: String!
  media_file: String
  isClosed: Boolean!
}

type MatchesOutput {
  id: ID!
  userId: String!
  matchedUserId: String!
  matchName: String!
  gender: String!
  age: String!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserChoiceOutput {
  Id: String!
  swiperId: String!
  shownUserId: String!
  swiperChoice: String!
  age: String!
  createdAt: DateTime!
  gender: String!
  choiceName: String!
}

type Query {
  getUser(userId: String!): User!
  getUserDevice(macAddress: String!): UserDevice!
  getUserProfile(userId: String!): UserProfile!

  """fetch user preference"""
  getUserPreference(userId: String!): UserPreference!

  """fetch user location details"""
  getUserLocation(userId: String!): LocationEntity!

  """fetch a tag"""
  getSpecificTag(id: String!): TagsEntity!

  """
  Filter by: all,"", frequency, physical_activity,education,religion etc 
  """
  getTags(tagType: String!): [TagsEntity!]!

  """search by: frequency, physical_activity,education,religion etc"""
  getTagsbyType(tagType: String!): [TagsEntity!]!
  uploadTags: String!

  """Fetch rating for specific content"""
  getRatingByContent(contentId: String!): RatingOutput!

  """Fetch content comments by owner"""
  getRatingContentComments(contentId: String!): [RatingComment!]!

  """
  Fetch average rating based on criteria id and/ or rater id. The first parameter 
         is the rater id and then the criteria id. Passing the rater id as an empty string  will return a result of the 
          average rating for the criteria id provided
  """
  getAverageRatings(criteriaId: String!, raterId: String!): AverageOutput!

  """fetch a tag"""
  getspecificTag(criteriaId: String!): RateCriterias!

  """
  Filter by: all,"", user_prompts and visual_prompts. 
      Passing all or an empty string as parameter will fetch all criterias
         tags. To filter particular criterias of type, pass the type as a parameter 
  """
  getCriterias(criteriaType: String!): [RateCriterias!]!
  uploadCriterias: String!

  """
  To fetch all prompts, pass all or empty string('') as first parameter and empty
      string ('') as second parameter, id. To fetch prompts of a type (prompts and visual_prompts only), specify the prompt type as first parameter and empty
      string ('') as second parameter, id. Specify or pass id as second paramter whiles the second parameter remains an empty
      string ('') to fetch a specific prompt.
  """
  getPrompts(id: String!, promptType: String!): [Prompts!]!

  """
  Always specify the prompt type (prompts and visual_prompts) to upload. Pass the prompt type as parameter.
  """
  uploadPrompts(promptType: String!): String!
  getUserPromptsOrder(userId: String!): [UserPromptsOutput!]!
  getAllUserPrompts(userId: String!): [UserPromptsOutput!]!
  getAllOpenComplaints: [ComplaintsOutput!]!
  getAComplaint(complaintId: String!): ComplaintsOutput!
  getUserMatches(userId: String!): [UserChoiceOutput!]!
  getMetaDetails: MetaDetails!
  getFeedBacks(feedbackfilter: FeedBackFilter!): [FeedBack!]!
}

input FeedBackFilter {
  deviceOS: String
  appVersion: String
  issue: String
  fromDate: String
  toDate: String
  page: Int!
  userId: String
  rating: Float
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): String!
  updateUser(updateUserInput: UpdateUserInput!): User!
  deleteUser(email: String!, userId: String!): String!
  login(loginUserInput: LoginUserInput!): UserToken!
  activateAccount(email: String!, code: Float!): UserToken!
  resendActivationCode(email: String!): String!
  forgotPassword(email: String!): String!
  verifyPasswordResetCode(code: Float!, email: String!): VerifyRestPasswordCode!
  resetPassword(password: String!, email: String!): User!
  testNewMailer(code: Float!, email: String!): String!
  saveDeviceDetails(userdeviceInput: UserDeviceInput!): UserDevice!
  saveUserProfile(userProfileInput: UserProfileInput!): UserProfile!

  """Use this endpoint to savs and update entity"""
  saveUserPreference(userPreferenceInput: UserPreferenceInput!): UserPreference!
  saveUserLocation(createLocationInput: CreateLocationInput!): LocationEntity!
  saveTag(tagInput: TagsInput!): TagsEntity!
  saveRatingGroup(ratingGroupInput: SaveRatingInput!): String!
  addNewPrompt(promptInput: PromptsInput!): Prompts!
  saveUserPrompt(UserPromptInput: UserPromptsInput!): UserPromptsOutput!
  saveUserPromptsOrder(userPromptsOrder: UserPromptsOrder!): String!
  saveNewCompliants(complaintsInput: ComplaintsInput!): ComplaintsOutput!
  updateComplaint(complaintsInput: ComplaintsInput!): ComplaintsOutput!
  closeComplaints(complaintId: String!): String!
  deactivateMatch(id: String!): String!
  createMetaDetails(metaDetailsInput: MetaDetailsInput!): MetaDetails!
  updateDetials(metaDetailsInput: MetaDetailsInput!): MetaDetails!
  saveUserFeedBack(feedbackInput: FeedBackInput!): String!
}

input CreateUserInput {
  email: String
  password: String
}

input UpdateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
}

input LoginUserInput {
  email: String!
  password: String!
}

input UserDeviceInput {
  userId: ID!
  createdAt: String
  osType: String
  macAddress: String
  version: String
  lastLogin: String
}

input UserProfileInput {
  userId: ID!
  createdAt: String
  profilePhoto: String
  birthday: String
  height: String
  gender: String
  locationId: String
  jobTitle: String
  jobTitleVisible: Boolean
  company: String
  companyVisible: Boolean
  homeTown: String
  homeTownVisible: Boolean
  school: String
  schoolVisible: Boolean
  educationLevel: String
  educationLevelVisible: Boolean
  ethinicity: [String!]
  ethinicityVisible: Boolean
  sports: [String!]
  sportsVisible: Boolean
  smoking: String
  smokingVisible: Boolean
  cannabis: String
  cannabisVisible: Boolean
  alcohol: String
  alcoholVisible: Boolean
  drugs: String
  drugsVisible: Boolean
  diet: [String!]
  dietVisible: Boolean
  languages: String
  languagesVisible: Boolean
  musicGenre: [String!]
  musicGenreVisible: Boolean
  creativeOulet: [String!]
  creativeOuletVisible: Boolean
  religions: [String!]
  religionsVisible: Boolean
  religiousPractice: [String!]
  religiousPracticeVisible: Boolean
  zodiac: String
  zodiacVisible: Boolean
  meyerBriggs: String
  meyerBriggsVisible: Boolean
  characteristics: [String!]
  characteristicsVisible: Boolean
  politics: String
  politicsVisible: Boolean
  parentingGoal: String
  parentingGoalVisible: Boolean
  relationshipGoals: [String!]
  relationshipGoalsVisible: Boolean
  relationshipTypes: [String!]
  relationshipTypesVisible: Boolean
  pets: [String!]
  petsVisible: Boolean
}

input UserPreferenceInput {
  userId: ID!
  createdAt: String
  heightRange: [String!]
  ageRange: [String!]
  gender: [String!]
  distance: Float
  ethnicityPreferences: [String!]
  sportsPreferences: [String!]
}

input CreateLocationInput {
  userId: ID!
  latitude: String
  longitude: String
  addressLine1: String
  addressLine2: String
  stateProvince: String
  country: String
  zipPostal: String
}

input TagsInput {
  id: ID!
  name: String!
  type: String!
  order: Float!
  visible: Boolean!
  emoji: String!
}

input SaveRatingInput {
  id: ID
  raterId: String!
  contentId: String!
  type: String!
  comment: [RatingCommentInput!]!
  ratingDetails: [saveRatingDto!]!
  startTime: String!
  endTime: String!
}

input RatingCommentInput {
  id: ID
  ratingGroupId: String!
  startTime: String!
  endTime: String!
  comment: String!
  final: Boolean!
}

input saveRatingDto {
  id: ID
  criteriaId: String!
  rating: Float!
}

input PromptsInput {
  id: ID!
  prompt: String!
  type: String!
  sample_answer: String
}

input UserPromptsInput {
  userId: String!
  promptId: String!
  answer: String!
}

input UserPromptsOrder {
  userId: String!
  userPromptIds: [String!]!
}

input ComplaintsInput {
  id: ID!
  createdAt: String!
  reporterId: String!
  accusedId: String!
  reason: String!
  comment: String!
  type: String!
  contentId: String!
  media_file: String
  isClosed: Boolean!
}

input MetaDetailsInput {
  forceUpdateAndroid: String!
  forceUpdateIOS: String!
  updateAndroid: String!
  updateIOS: String!
  updateTitleAndroid: String
  updateTitleIOS: String
  updateButtonAndroid: String
  updateButtonIOS: String
  updateTextAndroid: String
  updateTextIOS: String
  closeUpdateButtonAndroid: String
  closeUpdateButtonIOS: String
}

input FeedBackInput {
  userId: String!
  deviceOS: String!
  appVersion: String!
  rating: Float!
  issue: String!
  text: String!
  image: String
}
