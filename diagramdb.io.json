Table users as U {
  userId big_int [pk, increment] // auto-increment
  createdAt datetime
  email varchar(255)
  phoneNumber varchar(15)
  code int(4)
  salt varchar(max)
  password varchar(max)
  firstName varchar(50)
  lastName varchar(50)
  isVerified boolean
  resetCode int(4) [note: 'verification code sent by email to verify user']
  isBoarded boolean [note: 'whether user has finished onboarding']
  isVoteOnboarded boolean [note: 'whether user has finished the voting onboarding screens']
  updatedAt datetime
}

Table user_auth_provider {
  id bigint [pk, increment]
  userId bigint [not null]
  providerUserId varchar [not null, note: 'unique ID from of the user from the provider']
  providerName varchar [not null,  note: 'must be one of: google, apple, facebook']
}

Ref: "users"."userId" < "user_auth_provider"."userId"

Table user_devices {
  id big_int [pk, increment] // auto-increment
  userId big_int
  createdAt datetime
  osType varchar
  macAddress varchar
  version varchar
  lastLogin datetime
  notificationToken string
}
Ref: "users"."userId" < "user_devices"."userId"

// Enum for 'gender' table below
Enum gender {
  female
  male
}

Table user_profile {
  userId big_int [pk, increment] // auto-increment
  createdAt datetime
  profilePhoto string
  displayName string
  birthday date
  height int
  gender gender
  locationId int
  jobTitle varchar(50)
  company varchar(50)
  homeTown varchar(30)
  school varchar(50)
  promptIds big_int[6] [note: 'order of prompts being shown in user profile view']
}
Ref: "users"."userId" - "user_profile"."userId"
Ref: "user_profile"."locationId" < "location"."id"
Ref: "user_profile"."promptIds" < "user_prompts"."id"

// if the user is blocked, then they can't be seen by the other user (does not appear as vote, match, or chat)
Table user_blocked_by {
  id big_int
  blockedUserId big_int
  blockerId big_int
  createdAt datetime
}
Ref: "users"."userId" < "user_blocked_by"."blockedUserId"
Ref: "users"."userId" < "user_blocked_by"."blockerId"

Table location {
  id int
  latitude float
  longitude float
  addressLine1 varchar(255)
  addressLine2 varchar(255)
  stateProvince varchar(50)
  country varchar(30)
  zipPostal varchar(30)
}

Table user_preferences {
  userId big_int [pk, not null, unique]
  createdAt datetime
  heightRange int[2]
  ageRange int[2]
  gender gender[]
  distance int
  ethnicityPreferences ethnicity[]
  sportsPreferences int[]
}
Ref: "users"."userId" - "user_preferences"."userId"
Ref: "user_preferences"."sportsPreferences" < "tags"."id"

Enum tag_type {
  job
  company
  home_town
  school
  physical_activity
  zodiac
  education
  religion
  ethnicity
  drug_usage
  cannibis_usage
  alcohol_usage
  relationship_type
  relationship_goal
  parenting_goal
  politics
  creative
  going_out
  staying_in
  film_genre
  book_genre
  music_genre
  drink
  diet
  travel_goals
  pet
  date_options
  gender
  laguage
  meyer_briggs
  personality
}

Table tags {
  id int
  name varchar(30)
  type tag_type
  order decimal
  emoji varchar(5)
}

// note: everytime the user updates/adds a prompt a new user_prompts is created.
Table user_prompts {
  id bigint [pk, increment]
  createdAt datetime
  userId big_int [not null, note: 'should be able to query user_prompts by userId, and find all unique userPromptIds where createdAt is the latest'] 
  promptId int [not null]
  answer varchar(max) [note: 'if a new answer is input, we will generate a new prompt id']
}

Ref: "users"."userId" < "user_prompts"."userId"

Ref: "user_prompts"."promptId" < "prompts"."id"

Table user_visuals {
  id bigint [pk, increment]
  createdAt datetime
  userId big_int [not null]
  videoOrPhoto string [not null, note: 'file or blob url used to load image']
  blobName string [note: 'key used to find image in blob storage']
  // file string [note: 'stores blob url temporarily when it is uploaded. Once it is saved, we move it to videoOrPhoto' ]
  visualPromptId int
  deletedAt datetime
  description varchar(100)
  isVisible boolean 
}

Ref: "users"."userId" < "user_visuals"."userId"
Ref: "user_visuals"."visualPromptId" < "visual_prompts"."id"

Table user_visuals_order {
  id bigint [pk, increment]
  createdAt datetime
  userId big_int [not null]
  userVisualsIds string[] [note: 'list of user_visuals.id used to indicate the order user_visuals appear in the app']
}

Ref: "user_visuals"."id" < "user_visuals_order"."userVisualsIds"

Ref: "users"."userId" - "user_visuals_order"."userId"

// constant options users can choose from to describe thier image
Table visual_prompts {
  id bigint [pk, increment]
  prompt varchar
}

Enum swipe_choice {
  yes
  no
  unknown
}

Table user_shown {
  id big_int [pk, increment]
  createdAt datetime
  swiperId big_int [not null]
  shownUserId big_int [not null]
  swipeChoice swipe_choice
  swipedAt datetime
}
Ref: "users"."userId" < "user_shown"."shownUserId"

Ref: "users"."userId" < "user_shown"."swiperId"


// created when where 
// user_shown[1].swiper == user_shown[2].swipedOn && 
// user_shown[2].swiper ==  user_shown[1].swipedOn && 
// user_shown[1].swipeChoice == yes && 
// user_shown[2].swipeChoice == yes
Table matches {
  id big_int [pk, increment] 
  createdAt timestamp
  firstSwiper big_int [not null] 
  secondSwiper big_int [not null]
  active boolean [default: true]
}
Ref: "users"."userId" < "matches"."firstSwiper"

Ref: "users"."userId" < "matches"."secondSwiper"


// note: deleted_at filled if user blocks or reports a user
Enum content_types{
  text
  video
  audio
}
Table message {
  id big_int [pk, increment]
  createdAt datetime
  senderId big_int [not null]
  recieverId big_int [not null]
  contentType content_types
  sendAt datetime
  content varchar(max)
  deletedAt datetime [default: null] 
}
Ref: "users"."userId" < "message"."senderId"

Ref: "users"."userId" < "message"."recieverId"

Table connected_users {
  id big_int [pk, increment]
  userId big_int
  socketId varchar
  createdAt datetime
  lastActive datetime
  ec2InstanceId varchar
}
Ref: "users"."userId" < "connected_users"."userId"

Table user_chats {
  id big_int [pk, increment]
  userID big_int
  toUserID big_int
  createdAt datetime
  lastRead datetime
  lastDeleted datetime
}
Ref: "users"."userId" < "user_chats"."userID"

Ref: "users"."userId" < "user_chats"."toUserID"
// STATIC CONTENT
Table prompts {
  id int [pk, increment]
  prompt varchar(255)
  sample_answer text [note: 'used in placeholder']
  type varchar [note: 'prompts or visual_prompts']
}

// ---------- RATING ------------
// STATIC CONTENT
Table rate_criterias {
  id int [pk, increment]
  title varchar(30)
  description varchar(255)
  type content_type
}

Enum content_type {
  user_visuals
  user_prompts
}

Table rating {
   id bigint [pk, increment]
   createdAt datetime
   criteriaId int [not null]
   rating decimal [not null]
   contentId int [note: 'user_visuals.id or user_prompts.id']
   type content_type
   raterId big_int
   final boolean
  }
Ref: "rating"."contentId" < "user_visuals"."id"
Ref: "rating"."contentId" < "user_prompts"."id"

Table rating_comment {
   id bigint [pk, increment]
   ratingGroupId  bigint
   startTime datetime [note: 'focus in time']
   endTime datetim [note: 'focus out time']
   comment varchar(max)
   final boolean
}

Table rating_group {
  id bigint [pk, increment]
  raterId big_int [not null]
  type content_type
  contentId int [note: 'user_visuals.id or user_prompts.id']
  startTime datetime
  endTime datetime [note: 'submit time']
}

Ref: "rating_group"."contentId" < "user_visuals"."id"
Ref: "rating_group"."contentId" < "user_prompts"."id"
Ref: "rate_criterias"."id" < "rating"."criteriaId"
Ref: "rating_group"."id" < "rating_comment"."ratingGroupId"

// --------- COMPLAINTS ------------

// TODO: compliant_reason
Enum compliant_reason {
  inappropriate
}

Enum complaint_type {
  user_visuals
  user_prompts
  messages
  block_user
  report_user
}
Table user_complaints {
   id bigint [pk, increment]
   createdAt datetime
   reporterId big_int [note: 'user filing a complaint']
   accusedId big_int [note: 'user being accused of inappropriate behaviour']
   reason varchar
   comment varchar(max)
   type complaint_type
   contentId int [note: 'contentId is null when type is block_user or report_user']
   media_file string [note: 's3 bucket link to audio, photo or video']
}
Ref: "users"."userId" < "user_complaints"."reporterId"
Ref: "users"."userId" < "user_complaints"."accusedId"
Ref: "user_complaints"."contentId" < "message"."id"
Ref: "user_complaints"."contentId" < "user_prompts"."id"
Ref: "user_complaints"."contentId" < "user_visuals"."id"

// --------- META DATA ------------
Table meta {
   id bigint [pk, increment]
   forceUpdateAndroid varchar(30) [default: '0.0.0']
   forceUpdateIos varchar(30) [default: '0.0.0']
   updateAndroid  varchar(30) [default: '0.0.0']
   updateIos varchar(30) [default: '0.0.0']
   updateTitleAndroid varchar [default: 'It’s time to upgrade!']
   updateTextAndroid varchar [default: 'We’re constantly trying to make Scoop better!']
   updateButtonAndroid varchar [default: 'update now']
   closeUpdate_buttonAndroid varchar [default: 'update later']
   updateTitleIos varchar [default: 'It’s time to upgrade!']
   updateTextIos varchar  [default: 'We’re constantly trying to make Scoop better!']
   updateButtonIos varchar [default: 'update now']
   closeUpdateButtonIos varchar [default: 'update later']
}

Ref: "user_preferences"."userId" < "user_preferences"."gender"

Ref: "users"."userId" < "rating_group"."raterId" 

// --------- NOTIFICATIONS DATA ------------
Table notifications {
  id bigint [pk, increment]
  userId bigint [not null]
  isRead boolean [default: false]
  title varchar[100]
  body varchar[300]
  notificationType varchar[50]
  image varchar[500]
  payload json
  createdAt datetime
}

Ref: "notifications"."userId" < "users"."userId"
Ref: "notifications"."title" < "notifications"."isRead"


// --------- TAGS ------------
// ethnicity, sports, smoking, cannabis, alcohol, drugs, diet, languages, musicGenre, creativeOulet, religions, religiousPractice, zodiac, meyerBriggs, characteristics, politics, parentingGoal, relationshipGoals, relationshipTypes, pets
Table user_tags {
id  bigint [pk, increment]
userId  bigint
tagId  bigint 
tagName varchar(30)
tagType tag_type
userTagsTypeVisible user_tag_type_visibility[]
}

Ref: "tags"."id" < "user_tags"."tagId"

Table user_tag_type_visibility {
id  bigint [pk, increment]
userId  bigint
visible boolean [note: 'is the property visible on the users profile']
type tag_type [note: 'ex ethnicity, sports, smoking, cannabis...']
userTags user_tags[]
}


Ref: "user_profile"."userId" < "user_tag_type_visibility"."userId"

Ref: "user_profile"."userId" < "user_tags"."userId"


// --------- FEEDBACK DATA ------------

Table feedback{
  id bigint [pk, increment]
  userId bigint [not null]
  deviceOS varchar[100]
  appVersion varchar[100]
  rating decimal[300]
  issue varchar[350]
  text varchar[500]
  image varchar [default: null]
  createdAt datetime
}

Ref: "feedback"."userId" < "users"."userId"

// --------- GROUP CODES ------------
Table group_codes {
  id bigint [pk, increment]
  name varchar
  code varchar
  active boolean
  createdAt datetime
}

Table user_group_codes{
  id bigint [pk, increment]
  codeId bigint
  userId bigint
  createdAt datetime  
}
Ref: "group_codes"."id" < "user_group_codes"."codeId"
Ref: "user_group_codes"."userId" < "users"."userId"


// --------- FILE HASH TRACKER (FILESERVICE) ------------
Table file_hash_tracker {
  id string [note: 'format of ${hash}-${userId}-${fieldname} used to prevent same file upload from same user']
}

Ref: "user_visuals"."videoOrPhoto" - "file_hash_tracker"."id"


// --------- DEEPLINK HASH ------------

Table user_link {
  id uuid [pk, note: 'uuid is used to map back to user']
  userId bigint
  createdAt datetime
  state string [note: 'user can deactivate link']
  templateId string [note: 'used to ensure that uuid is used to only go to allowed deep link page']
}


// --------- PROFILE FEEDBACK SHARE ------------

// captured profile feedback
Table profile_share {
  id bigint [pk, increment]
  createdAt datetime
  description string   
  name string
  feedbackGroupId string [note: 'used to track which features were grouped and presented together']
}

// used to track which features were grouped and presented together
Table feedback_group {
  id bigint [pk, increment]
  createdAt datetime
  userId bigint [note: 'person/profile who got feedback']
  raterId bigint [note: 'null if unknown, else userId of the person who gave feedback']
  templateId string [note: 'from a list of known feedback versions: profile share, post date']
}

// to store data from first impressions feature
Table personality_feedback {
  id bigint [pk, increment]
  createdAt datetime
  personality string
  feedbackGroupId string
}

Ref: "feedback_group"."id" - "profile_share"."feedbackGroupId"

Ref: "feedback_group"."id" < "personality_feedback"."feedbackGroupId"

